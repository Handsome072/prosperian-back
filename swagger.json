{
  "openapi": "3.0.0",
  "info": {
    "title": "Supabase GraphQL API",
    "description": "API for managing companies, establishments, officers, addresses, files, and related data using GraphQL with a Supabase backend. All operations are performed via a single GraphQL endpoint using POST requests.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Local GraphQL server"
    }
  ],
  "paths": {
    "/graphql": {
      "post": {
        "summary": "GraphQL Endpoint",
        "description": "Single endpoint for all GraphQL queries (read operations) and mutations (create, update, delete operations). Use the 'query' field in the request body to specify the GraphQL operation and 'variables' for input parameters.",
        "tags": ["GraphQL"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "GraphQL query or mutation string (e.g., 'query { companies { id name } }' or 'mutation { createCompany(input: {...}) { id } }')"
                  },
                  "variables": {
                    "type": "object",
                    "description": "Variables for the GraphQL query or mutation (e.g., { id: 'uuid', input: {...} })"
                  }
                },
                "required": ["query"],
                "example": {
                  "query": "query GetCompany($id: ID!) { company(id: $id) { id registration_number name } }",
                  "variables": { "id": "123e4567-e89b-12d3-a456-426614174000" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful GraphQL response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "description": "GraphQL response data, structure depends on the query or mutation",
                      "example": {
                        "company": {
                          "id": "123e4567-e89b-12d3-a456-426614174000",
                          "registration_number": "123456789",
                          "name": "Example Corporation"
                        }
                      }
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": { "type": "string" },
                          "locations": { "type": "array", "items": { "type": "object" } },
                          "path": { "type": "array", "items": { "type": "string" } }
                        }
                      },
                      "description": "GraphQL errors, if any"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid GraphQL query, variables, or input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": { "type": "string", "example": "Invalid query syntax" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Database or server failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": { "type": "string", "example": "Server error: Database connection failed" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/companies": {
      "get": { "summary": "Get all companies", "tags": ["Company"], "responses": { "200": { "description": "List of companies", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Company" } } } } } } },
      "post": { "summary": "Create a new company", "tags": ["Company"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CompanyInput" } } } }, "responses": { "201": { "description": "Company created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Company" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/companies/{id}": {
      "get": { "summary": "Get a company by ID", "tags": ["Company"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Company found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Company" } } } }, "404": { "description": "Company not found" } } },
      "put": { "summary": "Update a company by ID", "tags": ["Company"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CompanyInput" } } } }, "responses": { "200": { "description": "Company updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Company" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Company not found" } } },
      "delete": { "summary": "Delete a company by ID", "tags": ["Company"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Company deleted" }, "404": { "description": "Company not found" } } }
    },
    "/api/establishments": {
      "get": { "summary": "Get all establishments", "tags": ["Establishment"], "responses": { "200": { "description": "List of establishments", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Establishment" } } } } } } },
      "post": { "summary": "Create a new establishment", "tags": ["Establishment"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EstablishmentInput" } } } }, "responses": { "201": { "description": "Establishment created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Establishment" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/establishments/{id}": {
      "get": { "summary": "Get an establishment by ID", "tags": ["Establishment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Establishment found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Establishment" } } } }, "404": { "description": "Establishment not found" } } },
      "put": { "summary": "Update an establishment by ID", "tags": ["Establishment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EstablishmentInput" } } } }, "responses": { "200": { "description": "Establishment updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Establishment" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Establishment not found" } } },
      "delete": { "summary": "Delete an establishment by ID", "tags": ["Establishment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Establishment deleted" }, "404": { "description": "Establishment not found" } } }
    },
    "/api/officers": {
      "get": { "summary": "Get all officers", "tags": ["Officer"], "responses": { "200": { "description": "List of officers", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Officer" } } } } } } },
      "post": { "summary": "Create a new officer", "tags": ["Officer"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OfficerInput" } } } }, "responses": { "201": { "description": "Officer created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Officer" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/officers/{id}": {
      "get": { "summary": "Get an officer by ID", "tags": ["Officer"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Officer found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Officer" } } } }, "404": { "description": "Officer not found" } } },
      "put": { "summary": "Update an officer by ID", "tags": ["Officer"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OfficerInput" } } } }, "responses": { "200": { "description": "Officer updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Officer" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Officer not found" } } },
      "delete": { "summary": "Delete an officer by ID", "tags": ["Officer"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Officer deleted" }, "404": { "description": "Officer not found" } } }
    },
    "/api/files": {
      "get": { "summary": "Get all files", "tags": ["File"], "responses": { "200": { "description": "List of files", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/File" } } } } } } },
      "post": { "summary": "Create a new file", "tags": ["File"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FileInput" } } } }, "responses": { "201": { "description": "File created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/File" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/files/{id}": {
      "get": { "summary": "Get a file by ID", "tags": ["File"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "File found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/File" } } } }, "404": { "description": "File not found" } } },
      "put": { "summary": "Update a file by ID", "tags": ["File"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FileInput" } } } }, "responses": { "200": { "description": "File updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/File" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "File not found" } } },
      "delete": { "summary": "Delete a file by ID", "tags": ["File"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "File deleted" }, "404": { "description": "File not found" } } }
    },
    "/api/users": {
      "get": { "summary": "Get all users", "tags": ["User"], "responses": { "200": { "description": "List of users", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/User" } } } } } } },
      "post": { "summary": "Create a new user", "tags": ["User"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserInput" } } } }, "responses": { "201": { "description": "User created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/users/{id}": {
      "get": { "summary": "Get a user by ID", "tags": ["User"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "User found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } }, "404": { "description": "User not found" } } },
      "put": { "summary": "Update a user by ID", "tags": ["User"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UserInput" } } } }, "responses": { "200": { "description": "User updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "User not found" } } },
      "delete": { "summary": "Delete a user by ID", "tags": ["User"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "User deleted" }, "404": { "description": "User not found" } } }
    },
    "/api/beneficial_owners": {
      "get": { "summary": "Get all beneficial owners", "tags": ["BeneficialOwner"], "responses": { "200": { "description": "List of beneficial owners", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/BeneficialOwner" } } } } } } },
      "post": { "summary": "Create a new beneficial owner", "tags": ["BeneficialOwner"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BeneficialOwnerInput" } } } }, "responses": { "201": { "description": "Beneficial owner created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BeneficialOwner" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/beneficial_owners/{id}": {
      "get": { "summary": "Get a beneficial owner by ID", "tags": ["BeneficialOwner"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Beneficial owner found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BeneficialOwner" } } } }, "404": { "description": "Beneficial owner not found" } } },
      "put": { "summary": "Update a beneficial owner by ID", "tags": ["BeneficialOwner"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BeneficialOwnerInput" } } } }, "responses": { "200": { "description": "Beneficial owner updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BeneficialOwner" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Beneficial owner not found" } } },
      "delete": { "summary": "Delete a beneficial owner by ID", "tags": ["BeneficialOwner"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Beneficial owner deleted" }, "404": { "description": "Beneficial owner not found" } } }
    },
    "/api/financial_statements": {
      "get": { "summary": "Get all financial statements", "tags": ["FinancialStatement"], "responses": { "200": { "description": "List of financial statements", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/FinancialStatement" } } } } } } },
      "post": { "summary": "Create a new financial statement", "tags": ["FinancialStatement"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FinancialStatementInput" } } } }, "responses": { "201": { "description": "Financial statement created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FinancialStatement" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/financial_statements/{id}": {
      "get": { "summary": "Get a financial statement by ID", "tags": ["FinancialStatement"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Financial statement found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FinancialStatement" } } } }, "404": { "description": "Financial statement not found" } } },
      "put": { "summary": "Update a financial statement by ID", "tags": ["FinancialStatement"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FinancialStatementInput" } } } }, "responses": { "200": { "description": "Financial statement updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FinancialStatement" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Financial statement not found" } } },
      "delete": { "summary": "Delete a financial statement by ID", "tags": ["FinancialStatement"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Financial statement deleted" }, "404": { "description": "Financial statement not found" } } }
    },
    "/api/risk_assessments": {
      "get": { "summary": "Get all risk assessments", "tags": ["RiskAssessment"], "responses": { "200": { "description": "List of risk assessments", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/RiskAssessment" } } } } } } },
      "post": { "summary": "Create a new risk assessment", "tags": ["RiskAssessment"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RiskAssessmentInput" } } } }, "responses": { "201": { "description": "Risk assessment created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RiskAssessment" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/risk_assessments/{id}": {
      "get": { "summary": "Get a risk assessment by ID", "tags": ["RiskAssessment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Risk assessment found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RiskAssessment" } } } }, "404": { "description": "Risk assessment not found" } } },
      "put": { "summary": "Update a risk assessment by ID", "tags": ["RiskAssessment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RiskAssessmentInput" } } } }, "responses": { "200": { "description": "Risk assessment updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RiskAssessment" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Risk assessment not found" } } },
      "delete": { "summary": "Delete a risk assessment by ID", "tags": ["RiskAssessment"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Risk assessment deleted" }, "404": { "description": "Risk assessment not found" } } }
    },
    "/api/bodacc_notices": {
      "get": { "summary": "Get all BODACC notices", "tags": ["BodaccNotice"], "responses": { "200": { "description": "List of BODACC notices", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/BodaccNotice" } } } } } } },
      "post": { "summary": "Create a new BODACC notice", "tags": ["BodaccNotice"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BodaccNoticeInput" } } } }, "responses": { "201": { "description": "BODACC notice created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BodaccNotice" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/bodacc_notices/{id}": {
      "get": { "summary": "Get a BODACC notice by ID", "tags": ["BodaccNotice"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "BODACC notice found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BodaccNotice" } } } }, "404": { "description": "BODACC notice not found" } } },
      "put": { "summary": "Update a BODACC notice by ID", "tags": ["BodaccNotice"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BodaccNoticeInput" } } } }, "responses": { "200": { "description": "BODACC notice updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BodaccNotice" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "BODACC notice not found" } } },
      "delete": { "summary": "Delete a BODACC notice by ID", "tags": ["BodaccNotice"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "BODACC notice deleted" }, "404": { "description": "BODACC notice not found" } } }
    },
    "/api/legal_acts": {
      "get": { "summary": "Get all legal acts", "tags": ["LegalAct"], "responses": { "200": { "description": "List of legal acts", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/LegalAct" } } } } } } },
      "post": { "summary": "Create a new legal act", "tags": ["LegalAct"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LegalActInput" } } } }, "responses": { "201": { "description": "Legal act created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LegalAct" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/legal_acts/{id}": {
      "get": { "summary": "Get a legal act by ID", "tags": ["LegalAct"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Legal act found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LegalAct" } } } }, "404": { "description": "Legal act not found" } } },
      "put": { "summary": "Update a legal act by ID", "tags": ["LegalAct"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LegalActInput" } } } }, "responses": { "200": { "description": "Legal act updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LegalAct" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Legal act not found" } } },
      "delete": { "summary": "Delete a legal act by ID", "tags": ["LegalAct"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Legal act deleted" }, "404": { "description": "Legal act not found" } } }
    },
    "/api/web_infos": {
      "get": { "summary": "Get all web infos", "tags": ["WebInfo"], "responses": { "200": { "description": "List of web infos", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/WebInfo" } } } } } } },
      "post": { "summary": "Create a new web info", "tags": ["WebInfo"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebInfoInput" } } } }, "responses": { "201": { "description": "Web info created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebInfo" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/web_infos/{id}": {
      "get": { "summary": "Get a web info by ID", "tags": ["WebInfo"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Web info found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebInfo" } } } }, "404": { "description": "Web info not found" } } },
      "put": { "summary": "Update a web info by ID", "tags": ["WebInfo"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebInfoInput" } } } }, "responses": { "200": { "description": "Web info updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WebInfo" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Web info not found" } } },
      "delete": { "summary": "Delete a web info by ID", "tags": ["WebInfo"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Web info deleted" }, "404": { "description": "Web info not found" } } }
    },
    "/api/emails": {
      "get": { "summary": "Get all emails", "tags": ["Email"], "responses": { "200": { "description": "List of emails", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Email" } } } } } } },
      "post": { "summary": "Create a new email", "tags": ["Email"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EmailInput" } } } }, "responses": { "201": { "description": "Email created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Email" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/emails/{id}": {
      "get": { "summary": "Get an email by ID", "tags": ["Email"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Email found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Email" } } } }, "404": { "description": "Email not found" } } },
      "put": { "summary": "Update an email by ID", "tags": ["Email"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/EmailInput" } } } }, "responses": { "200": { "description": "Email updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Email" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Email not found" } } },
      "delete": { "summary": "Delete an email by ID", "tags": ["Email"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Email deleted" }, "404": { "description": "Email not found" } } }
    },
    "/api/addresses": {
      "get": { "summary": "Get all addresses", "tags": ["Address"], "responses": { "200": { "description": "List of addresses", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Address" } } } } } } },
      "post": { "summary": "Create a new address", "tags": ["Address"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressInput" } } } }, "responses": { "201": { "description": "Address created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/addresses/{id}": {
      "get": { "summary": "Get an address by ID", "tags": ["Address"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Address found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } }, "404": { "description": "Address not found" } } },
      "put": { "summary": "Update an address by ID", "tags": ["Address"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AddressInput" } } } }, "responses": { "200": { "description": "Address updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Address" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Address not found" } } },
      "delete": { "summary": "Delete an address by ID", "tags": ["Address"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Address deleted" }, "404": { "description": "Address not found" } } }
    },
    "/api/subscriptions": {
      "get": { "summary": "Get all subscriptions", "tags": ["Subscription"], "responses": { "200": { "description": "List of subscriptions", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Subscription" } } } } } } },
      "post": { "summary": "Create a new subscription", "tags": ["Subscription"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscriptionInput" } } } }, "responses": { "201": { "description": "Subscription created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/subscriptions/{id}": {
      "get": { "summary": "Get a subscription by ID", "tags": ["Subscription"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Subscription found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } } }, "404": { "description": "Subscription not found" } } },
      "put": { "summary": "Update a subscription by ID", "tags": ["Subscription"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SubscriptionInput" } } } }, "responses": { "200": { "description": "Subscription updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Subscription" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Subscription not found" } } },
      "delete": { "summary": "Delete a subscription by ID", "tags": ["Subscription"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Subscription deleted" }, "404": { "description": "Subscription not found" } } }
    },
    "/api/credit_logs": {
      "get": { "summary": "Get all credit logs", "tags": ["CreditLog"], "responses": { "200": { "description": "List of credit logs", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/CreditLog" } } } } } } },
      "post": { "summary": "Create a new credit log", "tags": ["CreditLog"], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreditLogInput" } } } }, "responses": { "201": { "description": "Credit log created", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreditLog" } } } }, "400": { "description": "Invalid input" } } }
    },
    "/api/credit_logs/{id}": {
      "get": { "summary": "Get a credit log by ID", "tags": ["CreditLog"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "200": { "description": "Credit log found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreditLog" } } } }, "404": { "description": "Credit log not found" } } },
      "put": { "summary": "Update a credit log by ID", "tags": ["CreditLog"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreditLogInput" } } } }, "responses": { "200": { "description": "Credit log updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CreditLog" } } } }, "400": { "description": "Invalid input" }, "404": { "description": "Credit log not found" } } },
      "delete": { "summary": "Delete a credit log by ID", "tags": ["CreditLog"], "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid" } } ], "responses": { "204": { "description": "Credit log deleted" }, "404": { "description": "Credit log not found" } } }
    },
    "/api/pronto/personas": {
      "get": { 
        "summary": "List all personas", 
        "description": "Retrieves a list of all personas available in the system",
        "tags": ["Pronto"], 
        "responses": { 
          "200": { 
            "description": "List of personas", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "personas": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ProntoPersona"
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "personas": [
                      {
                        "uuid": "8e1dcba0-f0bb-4071-99fc-f18ba6559ccc",
                        "name": "VP Grenoble",
                        "job_titles": ["VP of Engineering", "CTO"],
                        "location": ["Grenoble, Auvergne-Rhône-Alpes, France"],
                        "created_at": "2024-09-09T15:15:15.951Z",
                        "updated_at": "2024-09-09T15:15:15.951Z"
                      }
                    ]
                  }
                ]
              } 
            } 
          },
          "401": {
            "description": "Unauthorized - Invalid API key"
          },
          "500": {
            "description": "Internal server error"
          }
        } 
      }
    },
    "/api/pronto/personas/{id}": {
      "get": { 
        "summary": "Get a specific persona", 
        "description": "Retrieves details of a specific persona by UUID",
        "tags": ["Pronto"], 
        "parameters": [ 
          { 
            "name": "id", 
            "in": "path", 
            "required": true, 
            "schema": { "type": "string", "format": "uuid" },
            "description": "UUID of the persona to retrieve"
          } 
        ], 
        "responses": { 
          "200": { 
            "description": "Persona details", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoPersona" },
                "example": {
                  "uuid": "8e1dcba0-f0bb-4071-99fc-f18ba6559ccc",
                  "name": "VP Grenoble",
                  "job_titles": ["VP of Engineering", "CTO"],
                  "location": ["Grenoble, Auvergne-Rhône-Alpes, France"],
                  "created_at": "2024-09-09T15:15:15.951Z",
                  "updated_at": "2024-09-09T15:15:15.951Z"
                }
              } 
            } 
          }, 
          "404": { "description": "Persona not found" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/lists": {
      "get": { 
        "summary": "Retrieve all lists", 
        "description": "Retrieves a list of all contact and company lists available in the system",
        "tags": ["Pronto"], 
        "responses": { 
          "200": { 
            "description": "List of lists", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProntoList"
                  }
                },
                "example": [
                  {
                    "uuid": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "Tech Companies",
                    "description": "List of technology companies",
                    "created_at": "2024-01-01T10:00:00.000Z",
                    "updated_at": "2024-01-01T10:00:00.000Z"
                  }
                ]
              } 
            } 
          },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      },
      "post": { 
        "summary": "Create a new list", 
        "description": "Creates a new list for organizing contacts and companies",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Name of the list" },
                  "description": { "type": "string", "description": "Description of the list" }
                },
                "required": ["name"]
              },
              "example": {
                "name": "New Tech List",
                "description": "List of new technology companies"
              }
            } 
          } 
        }, 
        "responses": { 
          "201": { 
            "description": "List created", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoList" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174001",
                  "name": "New Tech List",
                  "description": "List of new technology companies",
                  "created_at": "2024-01-01T10:00:00.000Z",
                  "updated_at": "2024-01-01T10:00:00.000Z"
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/lists/{id}": {
      "get": { 
        "summary": "Retrieve a specific list", 
        "description": "Retrieves details of a specific list by UUID",
        "tags": ["Pronto"], 
        "parameters": [ 
          { 
            "name": "id", 
            "in": "path", 
            "required": true, 
            "schema": { "type": "string", "format": "uuid" },
            "description": "UUID of the list to retrieve"
          } 
        ], 
        "responses": { 
          "200": { 
            "description": "List details", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoList" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "name": "Tech Companies",
                  "description": "List of technology companies",
                  "created_at": "2024-01-01T10:00:00.000Z",
                  "updated_at": "2024-01-01T10:00:00.000Z"
                }
              } 
            } 
          }, 
          "404": { "description": "List not found" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      },
      "put": { 
        "summary": "Update a list", 
        "description": "Updates an existing list with new information",
        "tags": ["Pronto"], 
        "parameters": [ 
          { 
            "name": "id", 
            "in": "path", 
            "required": true, 
            "schema": { "type": "string", "format": "uuid" },
            "description": "UUID of the list to update"
          } 
        ], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "name": { "type": "string", "description": "Name of the list" },
                  "description": { "type": "string", "description": "Description of the list" }
                }
              },
              "example": {
                "name": "Updated Tech List",
                "description": "Updated list of technology companies"
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "List updated", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoList" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "name": "Updated Tech List",
                  "description": "Updated list of technology companies",
                  "created_at": "2024-01-01T10:00:00.000Z",
                  "updated_at": "2024-01-02T10:00:00.000Z"
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" }, 
          "404": { "description": "List not found" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/searches": {
      "get": { 
        "summary": "Retrieve all searches", 
        "description": "Retrieves a list of all saved searches in the system",
        "tags": ["Pronto"], 
        "responses": { 
          "200": { 
            "description": "List of searches", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProntoSearch"
                  }
                },
                "example": [
                  {
                    "uuid": "123e4567-e89b-12d3-a456-426614174000",
                    "name": "Tech Companies in Paris",
                    "query": {
                      "industry": "Technology",
                      "location": "Paris, France",
                      "size": "10-50"
                    },
                    "created_at": "2024-01-01T10:00:00.000Z",
                    "updated_at": "2024-01-01T10:00:00.000Z"
                  }
                ]
              } 
            } 
          },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/searches/{id}": {
      "get": { 
        "summary": "Retrieve search details", 
        "description": "Retrieves details of a specific saved search by UUID",
        "tags": ["Pronto"], 
        "parameters": [ 
          { 
            "name": "id", 
            "in": "path", 
            "required": true, 
            "schema": { "type": "string", "format": "uuid" },
            "description": "UUID of the search to retrieve"
          } 
        ], 
        "responses": { 
          "200": { 
            "description": "Search details", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoSearch" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "name": "Tech Companies in Paris",
                  "query": {
                    "industry": "Technology",
                    "location": "Paris, France",
                    "size": "10-50"
                  },
                  "created_at": "2024-01-01T10:00:00.000Z",
                  "updated_at": "2024-01-01T10:00:00.000Z"
                }
              } 
            } 
          }, 
          "404": { "description": "Search not found" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/accounts/profiles": {
      "post": { 
        "summary": "Get profiles in a company", 
        "description": "Retrieves employee profiles and contact information for a specific company",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "company_name": { "type": "string", "description": "Name of the company" },
                  "domain": { "type": "string", "description": "Company domain/website" },
                  "limit": { "type": "integer", "description": "Maximum number of profiles to return" }
                },
                "required": ["company_name"]
              },
              "example": {
                "company_name": "Google",
                "domain": "google.com",
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Company profiles", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "profiles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProntoContact"
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of profiles found" }
                  }
                },
                "example": {
                  "profiles": [
                    {
                      "uuid": "123e4567-e89b-12d3-a456-426614174000",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@google.com",
                      "job_title": "Software Engineer",
                      "company": "Google",
                      "linkedin_url": "https://linkedin.com/in/johndoe"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/accounts/headcount": {
      "post": { 
        "summary": "Get headcount details", 
        "description": "Retrieves detailed headcount information and employee count evolution for a company",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "company_name": { "type": "string", "description": "Name of the company" },
                  "domain": { "type": "string", "description": "Company domain/website" }
                },
                "required": ["company_name"]
              },
              "example": {
                "company_name": "Google",
                "domain": "google.com"
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Headcount details", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "company": { "type": "string", "description": "Company name" },
                    "current_headcount": { "type": "integer", "description": "Current number of employees" },
                    "headcount_history": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": { "type": "string", "format": "date", "description": "Date of headcount record" },
                          "count": { "type": "integer", "description": "Number of employees on that date" }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "company": "Google",
                  "current_headcount": 150000,
                  "headcount_history": [
                    {
                      "date": "2023-01-01",
                      "count": 140000
                    },
                    {
                      "date": "2024-01-01",
                      "count": 150000
                    }
                  ]
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/accounts/extract": {
      "post": { 
        "summary": "Extract account search results", 
        "description": "Extracts company data based on search criteria and filters",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "query": { "type": "string", "description": "Search query for companies" },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "industry": { "type": "string", "description": "Industry filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "size": { "type": "string", "description": "Company size filter" },
                      "funding": { "type": "string", "description": "Funding status filter" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                },
                "required": ["query"]
              },
              "example": {
                "query": "technology companies",
                "filters": {
                  "industry": "Technology",
                  "location": "Paris, France",
                  "size": "10-50"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Account search results", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProntoAccount"
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of accounts found" }
                  }
                },
                "example": {
                  "accounts": [
                    {
                      "uuid": "123e4567-e89b-12d3-a456-426614174000",
                      "name": "TechCorp",
                      "website": "https://techcorp.com",
                      "linkedin_url": "https://linkedin.com/company/techcorp",
                      "industry": "Technology",
                      "size": "10-50",
                      "location": "Paris, France"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/leads/extract": {
      "post": { 
        "summary": "Extract lead search results", 
        "description": "Extracts contact/lead data based on search criteria and filters",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "query": { "type": "string", "description": "Search query for contacts" },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "job_title": { "type": "string", "description": "Job title filter" },
                      "company": { "type": "string", "description": "Company filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "seniority": { "type": "string", "description": "Seniority level filter" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                },
                "required": ["query"]
              },
              "example": {
                "query": "software engineers",
                "filters": {
                  "job_title": "Software Engineer",
                  "location": "Paris, France",
                  "seniority": "Senior"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Lead search results", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "leads": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProntoContact"
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of leads found" }
                  }
                },
                "example": {
                  "leads": [
                    {
                      "uuid": "123e4567-e89b-12d3-a456-426614174000",
                      "first_name": "Jane",
                      "last_name": "Smith",
                      "email": "jane.smith@techcorp.com",
                      "job_title": "Senior Software Engineer",
                      "company": "TechCorp",
                      "linkedin_url": "https://linkedin.com/in/janesmith"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/leads/company": {
      "post": { 
        "summary": "Extract leads from a company", 
        "description": "Extracts all available contacts/leads from a specific company",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "company_name": { "type": "string", "description": "Name of the company" },
                  "domain": { "type": "string", "description": "Company domain/website" },
                  "limit": { "type": "integer", "description": "Maximum number of leads to return" }
                },
                "required": ["company_name"]
              },
              "example": {
                "company_name": "Google",
                "domain": "google.com",
                "limit": 50
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Company leads", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "company": { "type": "string", "description": "Company name" },
                    "leads": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProntoContact"
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of leads found" }
                  }
                },
                "example": {
                  "company": "Google",
                  "leads": [
                    {
                      "uuid": "123e4567-e89b-12d3-a456-426614174000",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@google.com",
                      "job_title": "Software Engineer",
                      "company": "Google",
                      "linkedin_url": "https://linkedin.com/in/johndoe"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/enrichments/account": {
      "post": { 
        "summary": "Single account enrichment", 
        "description": "Enriches a single company account with additional firmographic data",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "company_name": { "type": "string", "description": "Name of the company" },
                  "domain": { "type": "string", "description": "Company domain/website" },
                  "linkedin_url": { "type": "string", "description": "Company LinkedIn URL" }
                },
                "required": ["company_name"]
              },
              "example": {
                "company_name": "TechCorp",
                "domain": "techcorp.com",
                "linkedin_url": "https://linkedin.com/company/techcorp"
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Enriched account data", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoAccount" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "name": "TechCorp",
                  "website": "https://techcorp.com",
                  "linkedin_url": "https://linkedin.com/company/techcorp",
                  "industry": "Technology",
                  "size": "10-50",
                  "location": "Paris, France"
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/enrichments/lead": {
      "post": { 
        "summary": "Single lead enrichment", 
        "description": "Enriches a single contact/lead with additional professional information",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "first_name": { "type": "string", "description": "Contact's first name" },
                  "last_name": { "type": "string", "description": "Contact's last name" },
                  "email": { "type": "string", "description": "Contact's email" },
                  "company": { "type": "string", "description": "Contact's company" },
                  "linkedin_url": { "type": "string", "description": "Contact's LinkedIn URL" }
                },
                "required": ["first_name", "last_name"]
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@techcorp.com",
                "company": "TechCorp",
                "linkedin_url": "https://linkedin.com/in/johndoe"
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Enriched lead data", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoContact" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "first_name": "John",
                  "last_name": "Doe",
                  "email": "john.doe@techcorp.com",
                  "phone": "+33123456789",
                  "job_title": "Software Engineer",
                  "company": "TechCorp",
                  "linkedin_url": "https://linkedin.com/in/johndoe"
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/enrichments/contact": {
      "post": { 
        "summary": "Single contact enrichment", 
        "description": "Enriches a single contact with email and phone data",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "first_name": { "type": "string", "description": "Contact's first name" },
                  "last_name": { "type": "string", "description": "Contact's last name" },
                  "company": { "type": "string", "description": "Contact's company" },
                  "domain": { "type": "string", "description": "Company domain" }
                },
                "required": ["first_name", "last_name", "company"]
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "company": "TechCorp",
                "domain": "techcorp.com"
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Enriched contact data", 
            "content": { 
              "application/json": { 
                "schema": { "$ref": "#/components/schemas/ProntoContact" },
                "example": {
                  "uuid": "123e4567-e89b-12d3-a456-426614174000",
                  "first_name": "John",
                  "last_name": "Doe",
                  "email": "john.doe@techcorp.com",
                  "phone": "+33123456789",
                  "job_title": "Software Engineer",
                  "company": "TechCorp",
                  "linkedin_url": "https://linkedin.com/in/johndoe"
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/enrichments/contacts/bulk": {
      "post": { 
        "summary": "Bulk contact enrichment", 
        "description": "Enriches multiple contacts with email and phone data in batch",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "contacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "first_name": { "type": "string", "description": "Contact's first name" },
                        "last_name": { "type": "string", "description": "Contact's last name" },
                        "company": { "type": "string", "description": "Contact's company" },
                        "domain": { "type": "string", "description": "Company domain" }
                      },
                      "required": ["first_name", "last_name", "company"]
                    }
                  }
                },
                "required": ["contacts"]
              },
              "example": {
                "contacts": [
                  {
                    "first_name": "John",
                    "last_name": "Doe",
                    "company": "TechCorp",
                    "domain": "techcorp.com"
                  },
                  {
                    "first_name": "Jane",
                    "last_name": "Smith",
                    "company": "TechCorp",
                    "domain": "techcorp.com"
                  }
                ]
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Bulk enriched contact data", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "enriched_contacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProntoContact"
                      }
                    },
                    "total_processed": { "type": "integer", "description": "Total number of contacts processed" },
                    "successful": { "type": "integer", "description": "Number of successfully enriched contacts" }
                  }
                },
                "example": {
                  "enriched_contacts": [
                    {
                      "uuid": "123e4567-e89b-12d3-a456-426614174000",
                      "first_name": "John",
                      "last_name": "Doe",
                      "email": "john.doe@techcorp.com",
                      "phone": "+33123456789",
                      "job_title": "Software Engineer",
                      "company": "TechCorp",
                      "linkedin_url": "https://linkedin.com/in/johndoe"
                    }
                  ],
                  "total_processed": 2,
                  "successful": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/intent/hiring": {
      "post": { 
        "summary": "Find companies hiring", 
        "description": "Identifies companies that are currently hiring based on job postings and recruitment activity",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "industry": { "type": "string", "description": "Industry filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "size": { "type": "string", "description": "Company size filter" },
                      "job_titles": { "type": "array", "items": { "type": "string" }, "description": "Specific job titles to look for" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                }
              },
              "example": {
                "filters": {
                  "industry": "Technology",
                  "location": "Paris, France",
                  "job_titles": ["Software Engineer", "Product Manager"]
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Companies hiring", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "hiring_companies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "company": { "$ref": "#/components/schemas/ProntoAccount" },
                          "job_count": { "type": "integer", "description": "Number of open positions" },
                          "recent_postings": { "type": "array", "items": { "type": "string" }, "description": "Recent job titles posted" }
                        }
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of hiring companies found" }
                  }
                },
                "example": {
                  "hiring_companies": [
                    {
                      "company": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000",
                        "name": "TechCorp",
                        "industry": "Technology",
                        "size": "10-50",
                        "location": "Paris, France"
                      },
                      "job_count": 5,
                      "recent_postings": ["Software Engineer", "Product Manager"]
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/intent/growing": {
      "post": { 
        "summary": "Find companies growing", 
        "description": "Identifies companies that are experiencing growth based on hiring, funding, and expansion indicators",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "industry": { "type": "string", "description": "Industry filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "growth_type": { "type": "string", "enum": ["hiring", "funding", "expansion"], "description": "Type of growth to focus on" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                }
              },
              "example": {
                "filters": {
                  "industry": "Technology",
                  "location": "Paris, France",
                  "growth_type": "hiring"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Growing companies", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "growing_companies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "company": { "$ref": "#/components/schemas/ProntoAccount" },
                          "growth_indicators": { "type": "array", "items": { "type": "string" }, "description": "Signs of growth" },
                          "growth_score": { "type": "number", "description": "Growth score (0-100)" }
                        }
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of growing companies found" }
                  }
                },
                "example": {
                  "growing_companies": [
                    {
                      "company": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000",
                        "name": "TechCorp",
                        "industry": "Technology",
                        "size": "10-50",
                        "location": "Paris, France"
                      },
                      "growth_indicators": ["Recent hiring", "New office opening"],
                      "growth_score": 85
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/intent/lookalikes": {
      "post": { 
        "summary": "Find companies lookalikes", 
        "description": "Finds companies similar to a target company based on industry, size, and characteristics",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "target_company": { "type": "string", "description": "Name of the target company" },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "location": { "type": "string", "description": "Location filter" },
                      "size_range": { "type": "string", "description": "Size range filter" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                },
                "required": ["target_company"]
              },
              "example": {
                "target_company": "Google",
                "filters": {
                  "location": "Paris, France",
                  "size_range": "10-50"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Similar companies", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "similar_companies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "company": { "$ref": "#/components/schemas/ProntoAccount" },
                          "similarity_score": { "type": "number", "description": "Similarity score (0-100)" },
                          "common_characteristics": { "type": "array", "items": { "type": "string" }, "description": "Shared characteristics" }
                        }
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of similar companies found" }
                  }
                },
                "example": {
                  "similar_companies": [
                    {
                      "company": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000",
                        "name": "TechCorp",
                        "industry": "Technology",
                        "size": "10-50",
                        "location": "Paris, France"
                      },
                      "similarity_score": 85,
                      "common_characteristics": ["Same industry", "Similar size", "Same location"]
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/intent/new-hires": {
      "post": { 
        "summary": "Find new hires", 
        "description": "Identifies people who have recently started new positions at companies",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "company": { "type": "string", "description": "Company filter" },
                      "job_title": { "type": "string", "description": "Job title filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "time_period": { "type": "string", "enum": ["1_month", "3_months", "6_months"], "description": "Time period for new hires" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                }
              },
              "example": {
                "filters": {
                  "company": "Google",
                  "job_title": "Software Engineer",
                  "time_period": "3_months"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "New hires data", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "new_hires": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contact": { "$ref": "#/components/schemas/ProntoContact" },
                          "start_date": { "type": "string", "format": "date", "description": "Start date at new position" },
                          "previous_company": { "type": "string", "description": "Previous company" }
                        }
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of new hires found" }
                  }
                },
                "example": {
                  "new_hires": [
                    {
                      "contact": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john.doe@google.com",
                        "job_title": "Software Engineer",
                        "company": "Google",
                        "linkedin_url": "https://linkedin.com/in/johndoe"
                      },
                      "start_date": "2024-01-01",
                      "previous_company": "Microsoft"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/intent/job-changes": {
      "post": { 
        "summary": "Track job changes", 
        "description": "Tracks people who have changed jobs or positions recently",
        "tags": ["Pronto"], 
        "requestBody": { 
          "required": true, 
          "content": { 
            "application/json": { 
              "schema": { 
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "company": { "type": "string", "description": "Company filter" },
                      "job_title": { "type": "string", "description": "Job title filter" },
                      "location": { "type": "string", "description": "Location filter" },
                      "time_period": { "type": "string", "enum": ["1_month", "3_months", "6_months"], "description": "Time period for job changes" }
                    }
                  },
                  "limit": { "type": "integer", "description": "Maximum number of results to return" }
                }
              },
              "example": {
                "filters": {
                  "company": "Google",
                  "time_period": "3_months"
                },
                "limit": 10
              }
            } 
          } 
        }, 
        "responses": { 
          "200": { 
            "description": "Job changes data", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "job_changes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contact": { "$ref": "#/components/schemas/ProntoContact" },
                          "change_date": { "type": "string", "format": "date", "description": "Date of job change" },
                          "previous_position": { "type": "string", "description": "Previous job title" },
                          "new_position": { "type": "string", "description": "New job title" },
                          "previous_company": { "type": "string", "description": "Previous company" },
                          "new_company": { "type": "string", "description": "New company" }
                        }
                      }
                    },
                    "total": { "type": "integer", "description": "Total number of job changes found" }
                  }
                },
                "example": {
                  "job_changes": [
                    {
                      "contact": {
                        "uuid": "123e4567-e89b-12d3-a456-426614174000",
                        "first_name": "John",
                        "last_name": "Doe",
                        "email": "john.doe@google.com",
                        "job_title": "Senior Software Engineer",
                        "company": "Google",
                        "linkedin_url": "https://linkedin.com/in/johndoe"
                      },
                      "change_date": "2024-01-01",
                      "previous_position": "Software Engineer",
                      "new_position": "Senior Software Engineer",
                      "previous_company": "Google",
                      "new_company": "Google"
                    }
                  ],
                  "total": 1
                }
              } 
            } 
          }, 
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/credits": {
      "get": { 
        "summary": "Get current credit balance", 
        "description": "Retrieves the current credit balance for your Pronto API account",
        "tags": ["Pronto"], 
        "responses": { 
          "200": { 
            "description": "Credit balance", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "credits": { "type": "integer", "description": "Current credit balance" },
                    "credits_used": { "type": "integer", "description": "Total credits used" },
                    "credits_total": { "type": "integer", "description": "Total credits purchased" }
                  }
                },
                "example": {
                  "credits": 950,
                  "credits_used": 50,
                  "credits_total": 1000
                }
              } 
            } 
          },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    },
    "/api/pronto/account": {
      "get": { 
        "summary": "Get account information", 
        "description": "Retrieves account information and settings for your Pronto API account",
        "tags": ["Pronto"], 
        "responses": { 
          "200": { 
            "description": "Account information", 
            "content": { 
              "application/json": { 
                "schema": { 
                  "type": "object",
                  "properties": {
                    "account_id": { "type": "string", "description": "Account identifier" },
                    "email": { "type": "string", "description": "Account email" },
                    "plan": { "type": "string", "description": "Current subscription plan" },
                    "created_at": { "type": "string", "format": "date-time", "description": "Account creation date" },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "timezone": { "type": "string", "description": "Account timezone" },
                        "language": { "type": "string", "description": "Account language" }
                      }
                    }
                  }
                },
                "example": {
                  "account_id": "acc_123456789",
                  "email": "user@example.com",
                  "plan": "Professional",
                  "created_at": "2024-01-01T10:00:00.000Z",
                  "settings": {
                    "timezone": "Europe/Paris",
                    "language": "en"
                  }
                }
              } 
            } 
          },
          "401": { "description": "Unauthorized - Invalid API key" },
          "500": { "description": "Internal server error" }
        } 
      }
    }
  },
  "components": {
    "schemas": {
      "Company": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "registration_number": { "type": "string", "description": "Company registration number (max 20 characters)" },
          "full_registration_number": { "type": "string", "description": "Full registration number including country code (max 20 characters)" },
          "vat_number": { "type": "string", "nullable": true, "description": "VAT number (max 50 characters)" },
          "name": { "type": "string", "description": "Company name" },
          "business_name": { "type": "string", "nullable": true, "description": "Business or trading name" },
          "creation_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of company creation" },
          "status": { "type": "string", "nullable": true, "description": "Company status (e.g., active, dissolved)" },
          "capital": { "type": "number", "nullable": true, "description": "Company capital amount" },
          "establishments_count": { "type": "integer", "nullable": true, "description": "Number of establishments" },
          "last_legal_update": { "type": "string", "format": "date", "nullable": true, "description": "Date of last legal update" },
          "establishments": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Establishment" },
            "description": "List of company establishments"
          },
          "officers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Officer" },
            "description": "List of company officers"
          },
          "beneficial_owners": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BeneficialOwner" },
            "description": "List of beneficial owners"
          },
          "financial_statements": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FinancialStatement" },
            "description": "List of financial statements"
          },
          "risk_assessment": { "$ref": "#/components/schemas/RiskAssessment", "nullable": true, "description": "Risk assessment for the company" },
          "bodacc_notices": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/BodaccNotice" },
            "description": "List of BODACC notices"
          },
          "legal_acts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LegalAct" },
            "description": "List of legal acts"
          },
          "web_info": { "$ref": "#/components/schemas/WebInfo", "nullable": true, "description": "Web and social media information" },
          "emails": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Email" },
            "description": "List of associated email addresses"
          }
        },
        "required": ["id", "registration_number", "full_registration_number", "name"]
      },
      "CompanyInput": {
        "type": "object",
        "properties": {
          "registration_number": { "type": "string", "description": "Company registration number (max 20 characters)" },
          "full_registration_number": { "type": "string", "description": "Full registration number including country code (max 20 characters)" },
          "vat_number": { "type": "string", "nullable": true, "description": "VAT number (max 50 characters)" },
          "name": { "type": "string", "description": "Company name" },
          "business_name": { "type": "string", "nullable": true, "description": "Business or trading name" },
          "creation_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of company creation" },
          "status": { "type": "string", "nullable": true, "description": "Company status" },
          "capital": { "type": "number", "nullable": true, "description": "Company capital amount" },
          "establishments_count": { "type": "integer", "nullable": true, "description": "Number of establishments" },
          "last_legal_update": { "type": "string", "format": "date", "nullable": true, "description": "Date of last legal update" }
        },
        "required": ["registration_number", "full_registration_number", "name"]
      },
      "Establishment": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "siret": { "type": "string", "description": "SIRET number (max 20 characters)" },
          "is_head_office": { "type": "boolean", "description": "Indicates if this is the head office" },
          "creation_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of establishment creation" },
          "status": { "type": "string", "nullable": true, "description": "Establishment status" },
          "address_id": { "type": "string", "format": "uuid", "nullable": true, "description": "Reference to address" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "address": { "$ref": "#/components/schemas/Address", "nullable": true, "description": "Associated address" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "siret", "is_head_office", "company_id"]
      },
      "EstablishmentInput": {
        "type": "object",
        "properties": {
          "siret": { "type": "string", "description": "SIRET number (max 20 characters)" },
          "is_head_office": { "type": "boolean", "description": "Indicates if this is the head office" },
          "creation_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of establishment creation" },
          "status": { "type": "string", "nullable": true, "description": "Establishment status" },
          "address_id": { "type": "string", "format": "uuid", "nullable": true, "description": "Reference to address" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["siret", "is_head_office", "company_id"]
      },
      "Officer": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "first_name": { "type": "string", "nullable": true, "description": "Officer's first name" },
          "last_name": { "type": "string", "nullable": true, "description": "Officer's last name" },
          "role": { "type": "string", "nullable": true, "description": "Officer's role (e.g., CEO, CFO)" },
          "start_date": { "type": "string", "format": "date", "nullable": true, "description": "Start date of role" },
          "end_date": { "type": "string", "format": "date", "nullable": true, "description": "End date of role" },
          "registration_number": { "type": "string", "nullable": true, "description": "Registration number if officer is a company (max 20 characters)" },
          "is_company": { "type": "boolean", "nullable": true, "description": "Indicates if the officer is a company" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "company_id"]
      },
      "OfficerInput": {
        "type": "object",
        "properties": {
          "first_name": { "type": "string", "nullable": true, "description": "Officer's first name" },
          "last_name": { "type": "string", "nullable": true, "description": "Officer's last name" },
          "role": { "type": "string", "nullable": true, "description": "Officer's role" },
          "start_date": { "type": "string", "format": "date", "nullable": true, "description": "Start date of role" },
          "end_date": { "type": "string", "format": "date", "nullable": true, "description": "End date of role" },
          "registration_number": { "type": "string", "nullable": true, "description": "Registration number if officer is a company" },
          "is_company": { "type": "boolean", "nullable": true, "description": "Indicates if the officer is a company" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["company_id"]
      },
      "BeneficialOwner": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "first_name": { "type": "string", "nullable": true, "description": "Beneficial owner's first name" },
          "last_name": { "type": "string", "nullable": true, "description": "Beneficial owner's last name" },
          "birth_date": { "type": "string", "nullable": true, "description": "Birth date as text" },
          "direct_shares_pct": { "type": "number", "nullable": true, "description": "Percentage of direct shares" },
          "indirect_shares_pct": { "type": "number", "nullable": true, "description": "Percentage of indirect shares" },
          "voting_rights_pct": { "type": "number", "nullable": true, "description": "Percentage of voting rights" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "company_id"]
      },
      "BeneficialOwnerInput": {
        "type": "object",
        "properties": {
          "first_name": { "type": "string", "nullable": true, "description": "Beneficial owner's first name" },
          "last_name": { "type": "string", "nullable": true, "description": "Beneficial owner's last name" },
          "birth_date": { "type": "string", "nullable": true, "description": "Birth date as text" },
          "direct_shares_pct": { "type": "number", "nullable": true, "description": "Percentage of direct shares" },
          "indirect_shares_pct": { "type": "number", "nullable": true, "description": "Percentage of indirect shares" },
          "voting_rights_pct": { "type": "number", "nullable": true, "description": "Percentage of voting rights" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["company_id"]
      },
      "FinancialStatement": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "year": { "type": "integer", "description": "Financial year" },
          "sales": { "type": "number", "nullable": true, "description": "Sales amount" },
          "profit": { "type": "number", "nullable": true, "description": "Profit amount" },
          "staff": { "type": "integer", "nullable": true, "description": "Number of staff" },
          "closing_date": { "type": "string", "format": "date", "nullable": true, "description": "Financial statement closing date" },
          "is_estimated": { "type": "boolean", "nullable": true, "description": "Indicates if data is estimated" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "year", "company_id"]
      },
      "FinancialStatementInput": {
        "type": "object",
        "properties": {
          "year": { "type": "integer", "description": "Financial year" },
          "sales": { "type": "number", "nullable": true, "description": "Sales amount" },
          "profit": { "type": "number", "nullable": true, "description": "Profit amount" },
          "staff": { "type": "integer", "nullable": true, "description": "Number of staff" },
          "closing_date": { "type": "string", "format": "date", "nullable": true, "description": "Financial statement closing date" },
          "is_estimated": { "type": "boolean", "nullable": true, "description": "Indicates if data is estimated" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["year", "company_id"]
      },
      "RiskAssessment": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "risk_level": { "type": "integer", "minimum": 0, "maximum": 5, "description": "Risk level (0-5)" },
          "description": { "type": "string", "nullable": true, "description": "Risk assessment description" },
          "collective_procedure": { "type": "boolean", "nullable": true, "description": "Indicates if under collective procedure" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company (unique)" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "risk_level", "company_id"]
      },
      "RiskAssessmentInput": {
        "type": "object",
        "properties": {
          "risk_level": { "type": "integer", "minimum": 0, "maximum": 5, "description": "Risk level (0-5)" },
          "description": { "type": "string", "nullable": true, "description": "Risk assessment description" },
          "collective_procedure": { "type": "boolean", "nullable": true, "description": "Indicates if under collective procedure" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["risk_level", "company_id"]
      },
      "BodaccNotice": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "type": { "type": "string", "nullable": true, "description": "Type of BODACC notice" },
          "parution_date": { "type": "string", "format": "date", "nullable": true, "description": "Publication date" },
          "number": { "type": "string", "nullable": true, "description": "Notice number" },
          "description": { "type": "string", "nullable": true, "description": "Notice description" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "company_id"]
      },
      "BodaccNoticeInput": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "nullable": true, "description": "Type of BODACC notice" },
          "parution_date": { "type": "string", "format": "date", "nullable": true, "description": "Publication date" },
          "number": { "type": "string", "nullable": true, "description": "Notice number" },
          "description": { "type": "string", "nullable": true, "description": "Notice description" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["company_id"]
      },
      "LegalAct": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "date": { "type": "string", "format": "date", "nullable": true, "description": "Date of legal act" },
          "type": { "type": "string", "nullable": true, "description": "Type of legal act" },
          "description": { "type": "string", "nullable": true, "description": "Legal act description" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "company_id"]
      },
      "LegalActInput": {
        "type": "object",
        "properties": {
          "date": { "type": "string", "format": "date", "nullable": true, "description": "Date of legal act" },
          "type": { "type": "string", "nullable": true, "description": "Type of legal act" },
          "description": { "type": "string", "nullable": true, "description": "Legal act description" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["company_id"]
      },
      "WebInfo": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "logos": { "type": "array", "items": { "type": "string" }, "nullable": true, "description": "Array of logo URLs" },
          "websites": { "type": "array", "items": { "type": "string" }, "nullable": true, "description": "Array of website URLs" },
          "linkedin_url": { "type": "string", "nullable": true, "description": "LinkedIn URL" },
          "twitter_url": { "type": "string", "nullable": true, "description": "Twitter URL" },
          "facebook_url": { "type": "string", "nullable": true, "description": "Facebook URL" },
          "instagram_url": { "type": "string", "nullable": true, "description": "Instagram URL" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company (unique)" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "company_id"]
      },
      "WebInfoInput": {
        "type": "object",
        "properties": {
          "logos": { "type": "array", "items": { "type": "string" }, "nullable": true, "description": "Array of logo URLs" },
          "websites": { "type": "array", "items": { "type": "string" }, "nullable": true, "description": "Array of website URLs" },
          "linkedin_url": { "type": "string", "nullable": true, "description": "LinkedIn URL" },
          "twitter_url": { "type": "string", "nullable": true, "description": "Twitter URL" },
          "facebook_url": { "type": "string", "nullable": true, "description": "Facebook URL" },
          "instagram_url": { "type": "string", "nullable": true, "description": "Instagram URL" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["company_id"]
      },
      "Email": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "value": { "type": "string", "description": "Email address" },
          "type": { "type": "string", "enum": ["generic", "personal"], "description": "Email type" },
          "test_result": { "type": "string", "nullable": true, "description": "Result of email validation test" },
          "test_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of email validation test" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "description": "Associated company" }
        },
        "required": ["id", "value", "type", "company_id"]
      },
      "EmailInput": {
        "type": "object",
        "properties": {
          "value": { "type": "string", "description": "Email address" },
          "type": { "type": "string", "enum": ["generic", "personal"], "description": "Email type" },
          "test_result": { "type": "string", "nullable": true, "description": "Result of email validation test" },
          "test_date": { "type": "string", "format": "date", "nullable": true, "description": "Date of email validation test" },
          "company_id": { "type": "string", "format": "uuid", "description": "Reference to company" }
        },
        "required": ["value", "type", "company_id"]
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "street": { "type": "string", "nullable": true, "description": "Street address" },
          "postal_code": { "type": "string", "nullable": true, "description": "Postal code (max 10 characters)" },
          "city": { "type": "string", "nullable": true, "description": "City" },
          "country_code": { "type": "string", "nullable": true, "description": "Country code (max 5 characters)" },
          "lat": { "type": "number", "nullable": true, "description": "Latitude" },
          "lng": { "type": "number", "nullable": true, "description": "Longitude" }
        },
        "required": ["id"]
      },
      "AddressInput": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "nullable": true, "description": "Street address" },
          "postal_code": { "type": "string", "nullable": true, "description": "Postal code (max 10 characters)" },
          "city": { "type": "string", "nullable": true, "description": "City" },
          "country_code": { "type": "string", "nullable": true, "description": "Country code (max 5 characters)" },
          "lat": { "type": "number", "nullable": true, "description": "Latitude" },
          "lng": { "type": "number", "nullable": true, "description": "Longitude" }
        },
        "required": []
      },
      "File": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "file_name": { "type": "string", "nullable": true, "description": "Name of the file" },
          "upload_date": { "type": "string", "format": "date-time", "nullable": true, "description": "File upload date" },
          "row_count": { "type": "integer", "nullable": true, "description": "Number of rows in the file" },
          "enriched_row_count": { "type": "integer", "nullable": true, "description": "Number of enriched rows" },
          "status": {
            "type": "string",
            "enum": ["uploaded", "processing", "completed", "error"],
            "nullable": true,
            "description": "File processing status"
          },
          "first_name": { "type": "string", "nullable": true, "description": "First name from file data" },
          "last_name": { "type": "string", "nullable": true, "description": "Last name from file data" },
          "gender": { "type": "string", "nullable": true, "description": "Gender from file data" },
          "title": { "type": "string", "nullable": true, "description": "Job title from file data" },
          "email": { "type": "string", "nullable": true, "description": "Email from file data" },
          "phone": { "type": "string", "nullable": true, "description": "Phone number from file data" },
          "all_phones": { "type": "string", "nullable": true, "description": "All phone numbers as text" },
          "company_name": { "type": "string", "nullable": true, "description": "Company name from file data" },
          "company_cleaned_name": { "type": "string", "nullable": true, "description": "Cleaned company name" },
          "company_website": { "type": "string", "nullable": true, "description": "Company website URL" },
          "company_domain": { "type": "string", "nullable": true, "description": "Company domain" },
          "linkedin_profile_url": { "type": "string", "nullable": true, "description": "LinkedIn profile URL" },
          "company_linkedin_id_url": { "type": "string", "nullable": true, "description": "Company LinkedIn ID URL" },
          "location": { "type": "string", "nullable": true, "description": "Location from file data" },
          "company_location": { "type": "string", "nullable": true, "description": "Company location" },
          "company_industry": { "type": "string", "nullable": true, "description": "Company industry" },
          "employee_count": { "type": "string", "nullable": true, "description": "Employee count as text" },
          "employee_range": { "type": "string", "nullable": true, "description": "Employee count range" },
          "revenue": { "type": "string", "nullable": true, "description": "Revenue as text" },
          "headquarters": { "type": "string", "nullable": true, "description": "Company headquarters location" },
          "year_founded": { "type": "string", "nullable": true, "description": "Year company was founded" },


          "linkedin_headline": { "type": "string", "nullable": true, "description": "LinkedIn headline" },
          "linkedin_connections_count": { "type": "integer", "nullable": true, "description": "Number of LinkedIn connections" },
          "start_date_job": { "type": "string", "nullable": true, "description": "Job start date" },
          "start_date_company": { "type": "string", "nullable": true, "description": "Company start date" },
          "years_in_position": { "type": "integer", "nullable": true, "description": "Years in current position" },
          "months_in_position": { "type": "integer", "nullable": true, "description": "Months in current position" },
          "years_in_company": { "type": "integer", "nullable": true, "description": "Years in company" },
          "months_in_company": { "type": "integer", "nullable": true, "description": "Months in company" },
          "current_positions_count": { "type": "integer", "nullable": true, "description": "Number of current positions" },
          "title_description": { "type": "string", "nullable": true, "description": "Job title description" },
          "summary": { "type": "string", "nullable": true, "description": "Profile summary" },
          "full_name": { "type": "string", "nullable": true, "description": "Full name from file data" },
          "sales_navigator_profile_url": { "type": "string", "nullable": true, "description": "Sales Navigator profile URL" },
          "linkedin_id_url": { "type": "string", "nullable": true, "description": "LinkedIn ID URL" },
          "profile_image_url": { "type": "string", "nullable": true, "description": "Profile image URL" },
          "company_profile_picture": { "type": "string", "nullable": true, "description": "Company profile picture URL" },
          "company_description": { "type": "string", "nullable": true, "description": "Company description" },
          "company_linkedin": { "type": "string", "nullable": true, "description": "Company LinkedIn URL" },
          "connection_degree": { "type": "string", "nullable": true, "description": "LinkedIn connection degree" },
          "is_premium_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if LinkedIn profile is premium" },
          "is_open_profile_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if LinkedIn profile is open" },
          "is_open_to_work_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if open to work on LinkedIn" },
          "email_alt": { "type": "string", "nullable": true, "description": "Alternative email" },
          "phone_alt": { "type": "string", "nullable": true, "description": "Alternative phone number" },
          "all_phones_alt": { "type": "string", "nullable": true, "description": "All alternative phone numbers as text" },
          "company_id": { "type": "string", "format": "uuid", "nullable": true, "description": "Reference to company" },
          "company": { "$ref": "#/components/schemas/Company", "nullable": true, "description": "Associated company" }
        },
        "required": ["id"]
      },
      "FileInput": {
        "type": "object",
        "properties": {
          "file_name": { "type": "string", "nullable": true, "description": "Name of the file" },
          "upload_date": { "type": "string", "format": "date-time", "nullable": true, "description": "File upload date" },
          "row_count": { "type": "integer", "nullable": true, "description": "Number of rows in the file" },
          "enriched_row_count": { "type": "integer", "nullable": true, "description": "Number of enriched rows" },
          "status": {
            "type": "string",
            "enum": ["uploaded", "processing", "completed", "error"],
            "nullable": true,
            "description": "File processing status"
          },
          "first_name": { "type": "string", "nullable": true, "description": "First name from file data" },
          "last_name": { "type": "string", "nullable": true, "description": "Last name from file data" },
          "gender": { "type": "string", "nullable": true, "description": "Gender from file data" },
          "title": { "type": "string", "nullable": true, "description": "Job title from file data" },
          "email": { "type": "string", "nullable": true, "description": "Email from file data" },
          "phone": { "type": "string", "nullable": true, "description": "Phone number from file data" },
          "all_phones": { "type": "string", "nullable": true, "description": "All phone numbers as text" },
          "company_name": { "type": "string", "nullable": true, "description": "Company name from file data" },
          "company_cleaned_name": { "type": "string", "nullable": true, "description": "Cleaned company name" },
          "company_website": { "type": "string", "nullable": true, "description": "Company website URL" },
          "company_domain": { "type": "string", "nullable": true, "description": "Company domain" },
          "linkedin_profile_url": { "type": "string", "nullable": true, "description": "LinkedIn profile URL" },
          "company_linkedin_id_url": { "type": "string", "nullable": true, "description": "Company LinkedIn ID URL" },
          "location": { "type": "string", "nullable": true, "description": "Location from file data" },
          "company_location": { "type": "string", "nullable": true, "description": "Company location" },
          "company_industry": { "type": "string", "nullable": true, "description": "Company industry" },
          "employee_count": { "type": "string", "nullable": true, "description": "Employee count as text" },
          "employee_range": { "type": "string", "nullable": true, "description": "Employee count range" },
          "revenue": { "type": "string", "nullable": true, "description": "Revenue as text" },
          "headquarters": { "type": "string", "nullable": true, "description": "Company headquarters location" },
          "year_founded": { "type": "string", "nullable": true, "description": "Year company was founded" },
          "linkedin_headline": { "type": "string", "nullable": true, "description": "LinkedIn headline" },
          "linkedin_connections_count": { "type": "integer", "nullable": true, "description": "Number of LinkedIn connections" },
          "start_date_job": { "type": "string", "nullable": true, "description": "Job start date" },
          "start_date_company": { "type": "string", "nullable": true, "description": "Company start date" },
          "years_in_position": { "type": "integer", "nullable": true, "description": "Years in current position" },
          "months_in_position": { "type": "integer", "nullable": true, "description": "Months in current position" },
          "years_in_company": { "type": "integer", "nullable": true, "description": "Years in company" },
          "months_in_company": { "type": "integer", "nullable": true, "description": "Months in company" },
          "current_positions_count": { "type": "integer", "nullable": true, "description": "Number of current positions" },
          "title_description": { "type": "string", "nullable": true, "description": "Job title description" },
          "summary": { "type": "string", "nullable": true, "description": "Profile summary" },
          "full_name": { "type": "string", "nullable": true, "description": "Full name from file data" },
          "sales_navigator_profile_url": { "type": "string", "nullable": true, "description": "Sales Navigator profile URL" },
          "linkedin_id_url": { "type": "string", "nullable": true, "description": "LinkedIn ID URL" },
          "profile_image_url": { "type": "string", "nullable": true, "description": "Profile image URL" },
          "company_profile_picture": { "type": "string", "nullable": true, "description": "Company profile picture URL" },
          "company_description": { "type": "string", "nullable": true, "description": "Company description" },
          "company_linkedin": { "type": "string", "nullable": true, "description": "Company LinkedIn URL" },
          "connection_degree": { "type": "string", "nullable": true, "description": "LinkedIn connection degree" },
          "is_premium_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if LinkedIn profile is premium" },
          "is_open_profile_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if LinkedIn profile is open" },
          "is_open_to_work_linkedin": { "type": "boolean", "nullable": true, "description": "Indicates if open to work on LinkedIn" },
          "email_alt": { "type": "string", "nullable": true, "description": "Alternative email" },
          "phone_alt": { "type": "string", "nullable": true, "description": "Alternative phone number" },
          "all_phones_alt": { "type": "string", "nullable": true, "description": "All alternative phone numbers as text" },
          "company_id": { "type": "string", "format": "uuid", "nullable": true, "description": "Reference to company" }
        },
        "required": []
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid", "description": "Unique identifier (UUID)" },
          "name": { "type": "string", "description": "User's name" },
          "email": { "type": "string", "description": "User's email" },
          "role": { "type": "string", "description": "User's role" },
          "status": { "type": "string", "description": "User's status" },
          "created_at": { "type": "string", "format": "date-time", "description": "Date and time user was created" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Date and time user was last updated" }
        },
        "required": ["id", "name", "email", "role", "status"]
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "User's name" },
          "email": { "type": "string", "description": "User's email" },
          "role": { "type": "string", "description": "User's role" },
          "status": { "type": "string", "description": "User's status" }
        },
        "required": ["name", "email", "role", "status"]
      },
      "ProntoPersona": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid", "description": "Unique identifier for the persona" },
          "name": { "type": "string", "description": "Name of the persona" },
          "job_titles": { 
            "type": "array", 
            "items": { "type": "string" }, 
            "description": "List of job titles for this persona" 
          },
          "location": { 
            "type": "array", 
            "items": { "type": "string" }, 
            "description": "List of locations for this persona" 
          },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["uuid", "name"]
      },
      "ProntoList": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid", "description": "Unique identifier for the list" },
          "name": { "type": "string", "description": "Name of the list" },
          "description": { "type": "string", "description": "Description of the list" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["uuid", "name"]
      },
      "ProntoSearch": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid", "description": "Unique identifier for the search" },
          "name": { "type": "string", "description": "Name of the search" },
          "query": { "type": "object", "description": "Search query parameters" },
          "created_at": { "type": "string", "format": "date-time", "description": "Creation timestamp" },
          "updated_at": { "type": "string", "format": "date-time", "description": "Last update timestamp" }
        },
        "required": ["uuid", "name"]
      },
      "ProntoAccount": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid", "description": "Unique identifier for the account" },
          "name": { "type": "string", "description": "Company name" },
          "website": { "type": "string", "description": "Company website" },
          "linkedin_url": { "type": "string", "description": "LinkedIn URL" },
          "industry": { "type": "string", "description": "Industry" },
          "size": { "type": "string", "description": "Company size" },
          "location": { "type": "string", "description": "Company location" }
        },
        "required": ["uuid", "name"]
      },
      "ProntoContact": {
        "type": "object",
        "properties": {
          "uuid": { "type": "string", "format": "uuid", "description": "Unique identifier for the contact" },
          "first_name": { "type": "string", "description": "Contact's first name" },
          "last_name": { "type": "string", "description": "Contact's last name" },
          "email": { "type": "string", "description": "Contact's email" },
          "phone": { "type": "string", "description": "Contact's phone number" },
          "job_title": { "type": "string", "description": "Contact's job title" },
          "company": { "type": "string", "description": "Contact's company" },
          "linkedin_url": { "type": "string", "description": "LinkedIn URL" }
        },
        "required": ["uuid", "first_name", "last_name"]
      }
    }
  },
  "tags": [
    {
      "name": "Queries",
      "description": "GraphQL queries for retrieving data (read-only operations, equivalent to HTTP GET)"
    },
    {
      "name": "Mutations",
      "description": "GraphQL mutations for creating, updating, or deleting data (equivalent to HTTP POST, PUT, DELETE)"
    },
    {
      "name": "GraphQL",
      "description": "Operations performed via the GraphQL endpoint"
    },
    {
      "name": "Pronto",
      "description": "Pronto API endpoints for B2B prospecting and data enrichment"
    }
  ],
  "x-endpoint-descriptions": [
    {
      "operation": "query company",
      "description": "Retrieve a single company by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetCompany($id: ID!) { company(id: $id) { id registration_number name } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174000" }
        },
        "response": {
          "data": {
            "company": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "registration_number": "123456789",
              "name": "Example Corporation"
            }
          }
        }
      }
    },
    {
      "operation": "query companies",
      "description": "Retrieve all companies",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { companies { id registration_number name } }"
        },
        "response": {
          "data": {
            "companies": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "registration_number": "123456789",
                "name": "Example Corporation"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query establishment",
      "description": "Retrieve a single establishment by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetEstablishment($id: ID!) { establishment(id: $id) { id siret company { id name } } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174001" }
        },
        "response": {
          "data": {
            "establishment": {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "siret": "987654321",
              "company": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "name": "Example Corporation"
              }
            }
          }
        }
      }
    },
    {
      "operation": "query establishments",
      "description": "Retrieve all establishments",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { establishments { id siret } }"
        },
        "response": {
          "data": {
            "establishments": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "siret": "987654321"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query officer",
      "description": "Retrieve a single officer by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetOfficer($id: ID!) { officer(id: $id) { id first_name last_name role } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174002" }
        },
        "response": {
          "data": {
            "officer": {
              "id": "123e4567-e89b-12d3-a456-426614174002",
              "first_name": "John",
              "last_name": "Doe",
              "role": "CEO"
            }
          }
        }
      }
    },
    {
      "operation": "query officers",
      "description": "Retrieve all officers",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { officers { id first_name last_name role } }"
        },
        "response": {
          "data": {
            "officers": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174002",
                "first_name": "John",
                "last_name": "Doe",
                "role": "CEO"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query file",
      "description": "Retrieve a single file by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetFile($id: ID!) { file(id: $id) { id file_name company { id name } } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174004" }
        },
        "response": {
          "data": {
            "file": {
              "id": "123e4567-e89b-12d3-a456-426614174004",
              "file_name": "report.pdf",
              "company": {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "name": "Example Corporation"
              }
            }
          }
        }
      }
    },
    {
      "operation": "query files",
      "description": "Retrieve all files",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { files { id file_name } }"
        },
        "response": {
          "data": {
            "files": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174004",
                "file_name": "report.pdf"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query beneficialOwner",
      "description": "Retrieve a single beneficial owner by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetBeneficialOwner($id: ID!) { beneficialOwner(id: $id) { id first_name last_name } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174003" }
        },
        "response": {
          "data": {
            "beneficialOwner": {
              "id": "123e4567-e89b-12d3-a456-426614174003",
              "first_name": "Jane",
              "last_name": "Doe"
            }
          }
        }
      }
    },
    {
      "operation": "query beneficialOwners",
      "description": "Retrieve all beneficial owners",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { beneficialOwners { id first_name last_name } }"
        },
        "response": {
          "data": {
            "beneficialOwners": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174003",
                "first_name": "Jane",
                "last_name": "Doe"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query financialStatement",
      "description": "Retrieve a single financial statement by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetFinancialStatement($id: ID!) { financialStatement(id: $id) { id year sales } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174005" }
        },
        "response": {
          "data": {
            "financialStatement": {
              "id": "123e4567-e89b-12d3-a456-426614174005",
              "year": 2023,
              "sales": 1000000
            }
          }
        }
      }
    },
    {
      "operation": "query financialStatements",
      "description": "Retrieve all financial statements",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { financialStatements { id year sales } }"
        },
        "response": {
          "data": {
            "financialStatements": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174005",
                "year": 2023,
                "sales": 1000000
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query riskAssessment",
      "description": "Retrieve a single risk assessment by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetRiskAssessment($id: ID!) { riskAssessment(id: $id) { id risk_level } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174006" }
        },
        "response": {
          "data": {
            "riskAssessment": {
              "id": "123e4567-e89b-12d3-a456-426614174006",
              "risk_level": 2
            }
          }
        }
      }
    },
    {
      "operation": "query riskAssessments",
      "description": "Retrieve all risk assessments",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { riskAssessments { id risk_level } }"
        },
        "response": {
          "data": {
            "riskAssessments": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174006",
                "risk_level": 2
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query bodaccNotice",
      "description": "Retrieve a single BODACC notice by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetBodaccNotice($id: ID!) { bodaccNotice(id: $id) { id type parution_date } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174007" }
        },
        "response": {
          "data": {
            "bodaccNotice": {
              "id": "123e4567-e89b-12d3-a456-426614174007",
              "type": "Announcement",
              "parution_date": "2023-01-01"
            }
          }
        }
      }
    },
    {
      "operation": "query bodaccNotices",
      "description": "Retrieve all BODACC notices",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { bodaccNotices { id type parution_date } }"
        },
        "response": {
          "data": {
            "bodaccNotices": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174007",
                "type": "Announcement",
                "parution_date": "2023-01-01"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query legalAct",
      "description": "Retrieve a single legal act by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetLegalAct($id: ID!) { legalAct(id: $id) { id type date } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174008" }
        },
        "response": {
          "data": {
            "legalAct": {
              "id": "123e4567-e89b-12d3-a456-426614174008",
              "type": "Merger",
              "date": "2023-01-01"
            }
          }
        }
      }
    },
    {
      "operation": "query legalActs",
      "description": "Retrieve all legal acts",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { legalActs { id type date } }"
        },
        "response": {
          "data": {
            "legalActs": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174008",
                "type": "Merger",
                "date": "2023-01-01"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query webInfo",
      "description": "Retrieve a single web info by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetWebInfo($id: ID!) { webInfo(id: $id) { id linkedin_url } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174009" }
        },
        "response": {
          "data": {
            "webInfo": {
              "id": "123e4567-e89b-12d3-a456-426614174009",
              "linkedin_url": "https://linkedin.com/company/example"
            }
          }
        }
      }
    },
    {
      "operation": "query webInfos",
      "description": "Retrieve all web infos",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { webInfos { id linkedin_url } }"
        },
        "response": {
          "data": {
            "webInfos": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174009",
                "linkedin_url": "https://linkedin.com/company/example"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query email",
      "description": "Retrieve a single email by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetEmail($id: ID!) { email(id: $id) { id value type } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174010" }
        },
        "response": {
          "data": {
            "email": {
              "id": "123e4567-e89b-12d3-a456-426614174010",
              "value": "contact@example.com",
              "type": "generic"
            }
          }
        }
      }
    },
    {
      "operation": "query emails",
      "description": "Retrieve all emails",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { emails { id value type } }"
        },
        "response": {
          "data": {
            "emails": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174010",
                "value": "contact@example.com",
                "type": "generic"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "query address",
      "description": "Retrieve a single address by ID",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query GetAddress($id: ID!) { address(id: $id) { id street city } }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174011" }
        },
        "response": {
          "data": {
            "address": {
              "id": "123e4567-e89b-12d3-a456-426614174011",
              "street": "123 Main St",
              "city": "Paris"
            }
          }
        }
      }
    },
    {
      "operation": "query addresses",
      "description": "Retrieve all addresses",
      "equivalent": "GET",
      "example": {
        "request": {
          "query": "query { addresses { id street city } }"
        },
        "response": {
          "data": {
            "addresses": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174011",
                "street": "123 Main St",
                "city": "Paris"
              }
            ]
          }
        }
      }
    },
    {
      "operation": "mutation createCompany",
      "description": "Create a new company",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateCompany($input: CompanyInput!) { createCompany(input: $input) { id registration_number name } }",
          "variables": {
            "input": {
              "registration_number": "123456789",
              "full_registration_number": "FR123456789",
              "name": "Example Corporation"
            }
          }
        },
        "response": {
          "data": {
            "createCompany": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "registration_number": "123456789",
              "name": "Example Corporation"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateCompany",
      "description": "Update an existing company",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateCompany($id: ID!, $input: CompanyInput!) { updateCompany(id: $id, input: $input) { id name } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174000",
            "input": {
              "name": "Updated Corporation"
            }
          }
        },
        "response": {
          "data": {
            "updateCompany": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Updated Corporation"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteCompany",
      "description": "Delete a company by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteCompany($id: ID!) { deleteCompany(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174000" }
        },
        "response": {
          "data": {
            "deleteCompany": true
          }
        }
      }
    },
    {
      "operation": "mutation createEstablishment",
      "description": "Create a new establishment",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateEstablishment($input: EstablishmentInput!) { createEstablishment(input: $input) { id siret company_id } }",
          "variables": {
            "input": {
              "siret": "987654321",
              "is_head_office": true,
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createEstablishment": {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "siret": "987654321",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateEstablishment",
      "description": "Update an existing establishment",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateEstablishment($id: ID!, $input: EstablishmentInput!) { updateEstablishment(id: $id, input: $input) { id siret } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174001",
            "input": {
              "siret": "987654322"
            }
          }
        },
        "response": {
          "data": {
            "updateEstablishment": {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "siret": "987654322"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteEstablishment",
      "description": "Delete an establishment by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteEstablishment($id: ID!) { deleteEstablishment(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174001" }
        },
        "response": {
          "data": {
            "deleteEstablishment": true
          }
        }
      }
    },
    {
      "operation": "mutation createOfficer",
      "description": "Create a new officer",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateOfficer($input: OfficerInput!) { createOfficer(input: $input) { id first_name last_name role } }",
          "variables": {
            "input": {
              "first_name": "John",
              "last_name": "Doe",
              "role": "CEO",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createOfficer": {
              "id": "123e4567-e89b-12d3-a456-426614174002",
              "first_name": "John",
              "last_name": "Doe",
              "role": "CEO"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateOfficer",
      "description": "Update an existing officer",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateOfficer($id: ID!, $input: OfficerInput!) { updateOfficer(id: $id, input: $input) { id role } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174002",
            "input": {
              "role": "CFO"
            }
          }
        },
        "response": {
          "data": {
            "updateOfficer": {
              "id": "123e4567-e89b-12d3-a456-426614174002",
              "role": "CFO"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteOfficer",
      "description": "Delete an officer by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteOfficer($id: ID!) { deleteOfficer(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174002" }
        },
        "response": {
          "data": {
            "deleteOfficer": true
          }
        }
      }
    },
    {
      "operation": "mutation createFile",
      "description": "Create a new file",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateFile($input: FileInput!) { createFile(input: $input) { id file_name company_id } }",
          "variables": {
            "input": {
              "file_name": "report.pdf",
              "status": "uploaded",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createFile": {
              "id": "123e4567-e89b-12d3-a456-426614174004",
              "file_name": "report.pdf",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateFile",
      "description": "Update an existing file",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateFile($id: ID!, $input: FileInput!) { updateFile(id: $id, input: $input) { id file_name } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174004",
            "input": {
              "file_name": "updated_report.pdf"
            }
          }
        },
        "response": {
          "data": {
            "updateFile": {
              "id": "123e4567-e89b-12d3-a456-426614174004",
              "file_name": "updated_report.pdf"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteFile",
      "description": "Delete a file by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteFile($id: ID!) { deleteFile(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174004" }
        },
        "response": {
          "data": {
            "deleteFile": true
          }
        }
      }
    },
    {
      "operation": "mutation createBeneficialOwner",
      "description": "Create a new beneficial owner",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateBeneficialOwner($input: BeneficialOwnerInput!) { createBeneficialOwner(input: $input) { id first_name last_name } }",
          "variables": {
            "input": {
              "first_name": "Jane",
              "last_name": "Doe",
              "birth_date": "1980-01-01",
              "direct_shares_pct": 25.5,
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createBeneficialOwner": {
              "id": "123e4567-e89b-12d3-a456-426614174003",
              "first_name": "Jane",
              "last_name": "Doe"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateBeneficialOwner",
      "description": "Update an existing beneficial owner",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateBeneficialOwner($id: ID!, $input: BeneficialOwnerInput!) { updateBeneficialOwner(id: $id, input: $input) { id first_name } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174003",
            "input": {
              "first_name": "Janet"
            }
          }
        },
        "response": {
          "data": {
            "updateBeneficialOwner": {
              "id": "123e4567-e89b-12d3-a456-426614174003",
              "first_name": "Janet"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteBeneficialOwner",
      "description": "Delete a beneficial owner by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteBeneficialOwner($id: ID!) { deleteBeneficialOwner(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174003" }
        },
        "response": {
          "data": {
            "deleteBeneficialOwner": true
          }
        }
      }
    },
    {
      "operation": "mutation createFinancialStatement",
      "description": "Create a new financial statement",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateFinancialStatement($input: FinancialStatementInput!) { createFinancialStatement(input: $input) { id year sales } }",
          "variables": {
            "input": {
              "year": 2023,
              "sales": 1000000,
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createFinancialStatement": {
              "id": "123e4567-e89b-12d3-a456-426614174005",
              "year": 2023,
              "sales": 1000000
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateFinancialStatement",
      "description": "Update an existing financial statement",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateFinancialStatement($id: ID!, $input: FinancialStatementInput!) { updateFinancialStatement(id: $id, input: $input) { id year sales } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174005",
            "input": {
              "sales": 1200000
            }
          }
        },
        "response": {
          "data": {
            "updateFinancialStatement": {
              "id": "123e4567-e89b-12d3-a456-426614174005",
              "year": 2023,
              "sales": 1200000
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteFinancialStatement",
      "description": "Delete a financial statement by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteFinancialStatement($id: ID!) { deleteFinancialStatement(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174005" }
        },
        "response": {
          "data": {
            "deleteFinancialStatement": true
          }
        }
      }
    },
    {
      "operation": "mutation createRiskAssessment",
      "description": "Create a new risk assessment",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateRiskAssessment($input: RiskAssessmentInput!) { createRiskAssessment(input: $input) { id risk_level } }",
          "variables": {
            "input": {
              "risk_level": 2,
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createRiskAssessment": {
              "id": "123e4567-e89b-12d3-a456-426614174006",
              "risk_level": 2
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateRiskAssessment",
      "description": "Update an existing risk assessment",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateRiskAssessment($id: ID!, $input: RiskAssessmentInput!) { updateRiskAssessment(id: $id, input: $input) { id risk_level } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174006",
            "input": {
              "risk_level": 3
            }
          }
        },
        "response": {
          "data": {
            "updateRiskAssessment": {
              "id": "123e4567-e89b-12d3-a456-426614174006",
              "risk_level": 3
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteRiskAssessment",
      "description": "Delete a risk assessment by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteRiskAssessment($id: ID!) { deleteRiskAssessment(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174006" }
        },
        "response": {
          "data": {
            "deleteRiskAssessment": true
          }
        }
      }
    },
    {
      "operation": "mutation createBodaccNotice",
      "description": "Create a new BODACC notice",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateBodaccNotice($input: BodaccNoticeInput!) { createBodaccNotice(input: $input) { id type parution_date } }",
          "variables": {
            "input": {
              "type": "Announcement",
              "parution_date": "2023-01-01",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createBodaccNotice": {
              "id": "123e4567-e89b-12d3-a456-426614174007",
              "type": "Announcement",
              "parution_date": "2023-01-01"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateBodaccNotice",
      "description": "Update an existing BODACC notice",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateBodaccNotice($id: ID!, $input: BodaccNoticeInput!) { updateBodaccNotice(id: $id, input: $input) { id type } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174007",
            "input": {
              "type": "Updated Announcement"
            }
          }
        },
        "response": {
          "data": {
            "updateBodaccNotice": {
              "id": "123e4567-e89b-12d3-a456-426614174007",
              "type": "Updated Announcement"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteBodaccNotice",
      "description": "Delete a BODACC notice by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteBodaccNotice($id: ID!) { deleteBodaccNotice(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174007" }
        },
        "response": {
          "data": {
            "deleteBodaccNotice": true
          }
        }
      }
    },
    {
      "operation": "mutation createLegalAct",
      "description": "Create a new legal act",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateLegalAct($input: LegalActInput!) { createLegalAct(input: $input) { id type date } }",
          "variables": {
            "input": {
              "type": "Merger",
              "date": "2023-01-01",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createLegalAct": {
              "id": "123e4567-e89b-12d3-a456-426614174008",
              "type": "Merger",
              "date": "2023-01-01"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateLegalAct",
      "description": "Update an existing legal act",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateLegalAct($id: ID!, $input: LegalActInput!) { updateLegalAct(id: $id, input: $input) { id type } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174008",
            "input": {
              "type": "Acquisition"
            }
          }
        },
        "response": {
          "data": {
            "updateLegalAct": {
              "id": "123e4567-e89b-12d3-a456-426614174008",
              "type": "Acquisition"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteLegalAct",
      "description": "Delete a legal act by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteLegalAct($id: ID!) { deleteLegalAct(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174008" }
        },
        "response": {
          "data": {
            "deleteLegalAct": true
          }
        }
      }
    },
    {
      "operation": "mutation createWebInfo",
      "description": "Create a new web info",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateWebInfo($input: WebInfoInput!) { createWebInfo(input: $input) { id linkedin_url } }",
          "variables": {
            "input": {
              "linkedin_url": "https://linkedin.com/company/example",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createWebInfo": {
              "id": "123e4567-e89b-12d3-a456-426614174009",
              "linkedin_url": "https://linkedin.com/company/example"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateWebInfo",
      "description": "Update an existing web info",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateWebInfo($id: ID!, $input: WebInfoInput!) { updateWebInfo(id: $id, input: $input) { id linkedin_url } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174009",
            "input": {
              "linkedin_url": "https://linkedin.com/company/updated-example"
            }
          }
        },
        "response": {
          "data": {
            "updateWebInfo": {
              "id": "123e4567-e89b-12d3-a456-426614174009",
              "linkedin_url": "https://linkedin.com/company/updated-example"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteWebInfo",
      "description": "Delete a web info by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteWebInfo($id: ID!) { deleteWebInfo(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174009" }
        },
        "response": {
          "data": {
            "deleteWebInfo": true
          }
        }
      }
    },
    {
      "operation": "mutation createEmail",
      "description": "Create a new email",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateEmail($input: EmailInput!) { createEmail(input: $input) { id value type } }",
          "variables": {
            "input": {
              "value": "contact@example.com",
              "type": "generic",
              "company_id": "123e4567-e89b-12d3-a456-426614174000"
            }
          }
        },
        "response": {
          "data": {
            "createEmail": {
              "id": "123e4567-e89b-12d3-a456-426614174010",
              "value": "contact@example.com",
              "type": "generic"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateEmail",
      "description": "Update an existing email",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateEmail($id: ID!, $input: EmailInput!) { updateEmail(id: $id, input: $input) { id value } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174010",
            "input": {
              "value": "updated@example.com"
            }
          }
        },
        "response": {
          "data": {
            "updateEmail": {
              "id": "123e4567-e89b-12d3-a456-426614174010",
              "value": "updated@example.com"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteEmail",
      "description": "Delete an email by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteEmail($id: ID!) { deleteEmail(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174010" }
        },
        "response": {
          "data": {
            "deleteEmail": true
          }
        }
      }
    },
    {
      "operation": "mutation createAddress",
      "description": "Create a new address",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateAddress($input: AddressInput!) { createAddress(input: $input) { id street city } }",
          "variables": {
            "input": {
              "street": "123 Main St",
              "city": "Paris"
            }
          }
        },
        "response": {
          "data": {
            "createAddress": {
              "id": "123e4567-e89b-12d3-a456-426614174011",
              "street": "123 Main St",
              "city": "Paris"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateAddress",
      "description": "Update an existing address",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateAddress($id: ID!, $input: AddressInput!) { updateAddress(id: $id, input: $input) { id street } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174011",
            "input": {
              "street": "456 Main St"
            }
          }
        },
        "response": {
          "data": {
            "updateAddress": {
              "id": "123e4567-e89b-12d3-a456-426614174011",
              "street": "456 Main St"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteAddress",
      "description": "Delete an address by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteAddress($id: ID!) { deleteAddress(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174011" }
        },
        "response": {
          "data": {
            "deleteAddress": true
          }
        }
      }
    },
    {
      "operation": "mutation createUser",
      "description": "Create a new user",
      "equivalent": "POST",
      "example": {
        "request": {
          "query": "mutation CreateUser($input: UserInput!) { createUser(input: $input) { id name email role status } }",
          "variables": {
            "input": {
              "name": "John Doe",
              "email": "john@example.com",
              "role": "Admin",
              "status": "Active"
            }
          }
        },
        "response": {
          "data": {
            "createUser": {
              "id": "123e4567-e89b-12d3-a456-426614174012",
              "name": "John Doe",
              "email": "john@example.com",
              "role": "Admin",
              "status": "Active"
            }
          }
        }
      }
    },
    {
      "operation": "mutation updateUser",
      "description": "Update an existing user",
      "equivalent": "PUT",
      "example": {
        "request": {
          "query": "mutation UpdateUser($id: ID!, $input: UserInput!) { updateUser(id: $id, input: $input) { id name email role status } }",
          "variables": {
            "id": "123e4567-e89b-12d3-a456-426614174012",
            "input": {
              "name": "John Doe",
              "email": "john@example.com",
              "role": "Admin",
              "status": "Active"
            }
          }
        },
        "response": {
          "data": {
            "updateUser": {
              "id": "123e4567-e89b-12d3-a456-426614174012",
              "name": "John Doe",
              "email": "john@example.com",
              "role": "Admin",
              "status": "Active"
            }
          }
        }
      }
    },
    {
      "operation": "mutation deleteUser",
      "description": "Delete a user by ID",
      "equivalent": "DELETE",
      "example": {
        "request": {
          "query": "mutation DeleteUser($id: ID!) { deleteUser(id: $id) }",
          "variables": { "id": "123e4567-e89b-12d3-a456-426614174012" }
        },
        "response": {
          "data": {
            "deleteUser": true
          }
        }
      }
    }
  ]
}